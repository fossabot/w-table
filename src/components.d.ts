/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  Column,
} from './model/input/column';
import {
  SelectedOrderingEvent,
} from './model/events/selected-ordering';
import {
  Pagination,
} from './model/input/pagination';
import {
  Pivot,
} from './model/input/pivot';

declare global {

  namespace StencilComponents {
    interface WTableHeader {
      'activeOrdering': SelectedOrderingEvent;
      /**
       * column definitions.
       */
      'columns': Array<Column>;
    }
  }

  interface HTMLWTableHeaderElement extends StencilComponents.WTableHeader, HTMLStencilElement {}

  var HTMLWTableHeaderElement: {
    prototype: HTMLWTableHeaderElement;
    new (): HTMLWTableHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'w-table-header': HTMLWTableHeaderElement;
  }
  interface ElementTagNameMap {
    'w-table-header': HTMLWTableHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'w-table-header': JSXElements.WTableHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface WTableHeaderAttributes extends HTMLAttributes {
      'activeOrdering'?: SelectedOrderingEvent;
      /**
       * column definitions.
       */
      'columns'?: Array<Column>;
      'onOrderingSelected'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WTablePager {
      'pagination': Pagination;
      'total': number;
    }
  }

  interface HTMLWTablePagerElement extends StencilComponents.WTablePager, HTMLStencilElement {}

  var HTMLWTablePagerElement: {
    prototype: HTMLWTablePagerElement;
    new (): HTMLWTablePagerElement;
  };
  interface HTMLElementTagNameMap {
    'w-table-pager': HTMLWTablePagerElement;
  }
  interface ElementTagNameMap {
    'w-table-pager': HTMLWTablePagerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'w-table-pager': JSXElements.WTablePagerAttributes;
    }
  }
  namespace JSXElements {
    export interface WTablePagerAttributes extends HTMLAttributes {
      'onItemsPerPageChange'?: (event: CustomEvent) => void;
      'onPageChange'?: (event: CustomEvent) => void;
      'pagination'?: Pagination;
      'total'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WTablePivot {
      'columns': Array<Column>;
      'currentOrdering': SelectedOrderingEvent;
      'groupItems': Array<any>;
      'key': any;
      'pivot': Pivot;
    }
  }

  interface HTMLWTablePivotElement extends StencilComponents.WTablePivot, HTMLStencilElement {}

  var HTMLWTablePivotElement: {
    prototype: HTMLWTablePivotElement;
    new (): HTMLWTablePivotElement;
  };
  interface HTMLElementTagNameMap {
    'w-table-pivot': HTMLWTablePivotElement;
  }
  interface ElementTagNameMap {
    'w-table-pivot': HTMLWTablePivotElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'w-table-pivot': JSXElements.WTablePivotAttributes;
    }
  }
  namespace JSXElements {
    export interface WTablePivotAttributes extends HTMLAttributes {
      'columns'?: Array<Column>;
      'currentOrdering'?: SelectedOrderingEvent;
      'groupItems'?: Array<any>;
      'key'?: any;
      'pivot'?: Pivot;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WTableRow {
      'columns': Array<Column>;
      'item': any;
    }
  }

  interface HTMLWTableRowElement extends StencilComponents.WTableRow, HTMLStencilElement {}

  var HTMLWTableRowElement: {
    prototype: HTMLWTableRowElement;
    new (): HTMLWTableRowElement;
  };
  interface HTMLElementTagNameMap {
    'w-table-row': HTMLWTableRowElement;
  }
  interface ElementTagNameMap {
    'w-table-row': HTMLWTableRowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'w-table-row': JSXElements.WTableRowAttributes;
    }
  }
  namespace JSXElements {
    export interface WTableRowAttributes extends HTMLAttributes {
      'columns'?: Array<Column>;
      'item'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WTable {
      /**
       * column definitions.
       */
      'columns': Array<Column>;
      /**
       * all items that should be displayed in the table.
       */
      'items': Array<any>;
      /**
       * pagination definition.
       */
      'pagination': Pagination;
      /**
       * pivot definition.
       */
      'pivot': Pivot;
      /**
       * element for additional row details or other interactions.
       */
      'rowDetails': (item: any) => JSX.Element | string;
    }
  }

  interface HTMLWTableElement extends StencilComponents.WTable, HTMLStencilElement {}

  var HTMLWTableElement: {
    prototype: HTMLWTableElement;
    new (): HTMLWTableElement;
  };
  interface HTMLElementTagNameMap {
    'w-table': HTMLWTableElement;
  }
  interface ElementTagNameMap {
    'w-table': HTMLWTableElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'w-table': JSXElements.WTableAttributes;
    }
  }
  namespace JSXElements {
    export interface WTableAttributes extends HTMLAttributes {
      /**
       * column definitions.
       */
      'columns'?: Array<Column>;
      /**
       * all items that should be displayed in the table.
       */
      'items'?: Array<any>;
      /**
       * pagination definition.
       */
      'pagination'?: Pagination;
      /**
       * pivot definition.
       */
      'pivot'?: Pivot;
      /**
       * element for additional row details or other interactions.
       */
      'rowDetails'?: (item: any) => JSX.Element | string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;